use env_logger;
use std::io::Cursor;
use winstructs::security::{Ace, Acl, SecurityDescriptor, Sid};

fn ace_example_01() {
    let buffer: &[u8] = &[
        0x00, 0x13, 0x24, 0x00, 0x3F, 0x00, 0x0F, 0x00, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x05, 0x15, 0x00, 0x00, 0x00, 0x7F, 0xBC, 0xCD, 0x2A, 0x23, 0xD1, 0xD7, 0x45, 0x0B, 0x29,
        0x5B, 0x68, 0xE9, 0x03, 0x00, 0x00,
    ];

    let ace = Ace::new(Cursor::new(buffer)).unwrap();

    println!("{:#?}", ace);
    println!("{}", serde_json::to_string(&ace).unwrap());
}

fn acl_example_01() {
    let buffer: &[u8] = &[
        0x02, 0x00, 0x6C, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x24, 0x00, 0x3F, 0x00, 0x0F,
        0x00, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x15, 0x00, 0x00, 0x00, 0x7F, 0xBC,
        0xCD, 0x2A, 0x23, 0xD1, 0xD7, 0x45, 0x0B, 0x29, 0x5B, 0x68, 0xE9, 0x03, 0x00, 0x00, 0x00,
        0x13, 0x14, 0x00, 0x3F, 0x00, 0x0F, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,
        0x12, 0x00, 0x00, 0x00, 0x00, 0x13, 0x18, 0x00, 0x3F, 0x00, 0x0F, 0x00, 0x01, 0x02, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x05, 0x20, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x00, 0x13,
        0x14, 0x00, 0x19, 0x00, 0x02, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0C,
        0x00, 0x00, 0x00,
    ];

    let acl = Acl::new(Cursor::new(buffer)).unwrap();
    println!("{:#?}", acl);
    println!("{}", serde_json::to_string(&acl).unwrap());
}

fn sid_example_01() {
    let buffer: &[u8] = &[
        0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x12, 0x00, 0x00, 0x00,
    ];

    let sid = Sid::new(Cursor::new(buffer)).unwrap();

    println!("{:#?}", sid);
    println!("{}", sid);
    println!("{}", serde_json::to_string(&sid).unwrap());
}

fn security_descriptor_01() {
    let buffer: &[u8] = &[
        0x01, 0x00, 0x04, 0x98, 0x98, 0x00, 0x00, 0x00, 0xA4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x14, 0x00, 0x00, 0x00, 0x02, 0x00, 0x84, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x03,
        0x24, 0x00, 0x3F, 0x00, 0x0F, 0x00, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x15,
        0x00, 0x00, 0x00, 0x7F, 0xBC, 0xCD, 0x2A, 0x23, 0xD1, 0xD7, 0x45, 0x0B, 0x29, 0x5B, 0x68,
        0xE9, 0x03, 0x00, 0x00, 0x00, 0x03, 0x14, 0x00, 0x3F, 0x00, 0x0F, 0x00, 0x01, 0x01, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x05, 0x12, 0x00, 0x00, 0x00, 0x00, 0x03, 0x18, 0x00, 0x3F, 0x00,
        0x0F, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x20, 0x00, 0x00, 0x00, 0x20,
        0x02, 0x00, 0x00, 0x00, 0x03, 0x14, 0x00, 0x19, 0x00, 0x02, 0x00, 0x01, 0x01, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x05, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x03, 0x18, 0x00, 0x19, 0x00, 0x02,
        0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x12, 0x00, 0x00, 0x00, 0x01,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x12, 0x00, 0x00, 0x00,
    ];

    let sd = SecurityDescriptor::from_stream(Cursor::new(buffer)).unwrap();

    println!("{:#?}", sd);
    println!("{}", serde_json::to_string(&sd).unwrap());
}

fn main() {
    env_logger::init();
    ace_example_01();
    acl_example_01();
    security_descriptor_01();
    sid_example_01();
}
